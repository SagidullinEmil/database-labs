PS C:\Users\Emil> psql -U postgres -d postgres -p 5432
Пароль пользователя postgres:

psql (17.6)
Введите "help", чтобы получить справку.

postgres=# CREATE TABLE departments (
postgres(#         dept_id SERIAL PRIMARY KEY,
postgres(#         dept_name VARCHAR(100) NOT NULL,
postgres(#         location VARCHAR(100)
postgres(# );
ОШИБКА:  отношение "departments" уже существует
postgres=# \l
                                                               Список баз данных
    Имя    | Владелец | Кодировка | Провайдер локали |     LC_COLLATE      |      LC_CTYPE       | Локаль | Правила ICU |     Права доступа
-----------+----------+-----------+------------------+---------------------+---------------------+--------+-------------+-----------------------
 postgres  | postgres | UTF8      | libc             | Russian_Russia.1251 | Russian_Russia.1251 |        |             |
 template0 | postgres | UTF8      | libc             | Russian_Russia.1251 | Russian_Russia.1251 |        |             | =c/postgres          +
           |          |           |                  |                     |                     |        |             | postgres=CTc/postgres
 template1 | postgres | UTF8      | libc             | Russian_Russia.1251 | Russian_Russia.1251 |        |             | =c/postgres          +
           |          |           |                  |                     |                     |        |             | postgres=CTc/postgres
(3 строки)


postgres=# \dt
                 Список отношений
 Схема  |        Имя         |   Тип   | Владелец
--------+--------------------+---------+----------
 public | course_enrollments | таблица | postgres
 public | customers          | таблица | postgres
 public | departments        | таблица | postgres
 public | orders             | таблица | postgres
 public | products           | таблица | postgres
 public | students_new       | таблица | postgres
 public | transactions       | таблица | postgres
 public | university_list    | таблица | postgres
(8 строк)


postgres=# DROP SCHEMA public CASCADE;
ЗАМЕЧАНИЕ:  удаление распространяется на ещё 8 объектов
ПОДРОБНОСТИ:  удаление распространяется на объект таблица students_new
удаление распространяется на объект таблица university_list
удаление распространяется на объект таблица course_enrollments
удаление распространяется на объект таблица products
удаление распространяется на объект таблица transactions
удаление распространяется на объект таблица orders
удаление распространяется на объект таблица customers
удаление распространяется на объект таблица departments
DROP SCHEMA
postgres=# CREATE TABLE departments (
postgres(#         dept_id SERIAL PRIMARY KEY,
postgres(#         dept_name VARCHAR(100) NOT NULL,
postgres(#         location VARCHAR(100)
postgres(# );
ОШИБКА:  схема для создания объектов не выбрана
СТРОКА 1: CREATE TABLE departments (
                       ^
postgres=# CREATE SCHEMA public;
CREATE SCHEMA
postgres=# CREATE TABLE departments (
postgres(#         dept_id SERIAL PRIMARY KEY,
postgres(#         dept_name VARCHAR(100) NOT NULL,
postgres(#         location VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE employees(
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER,
postgres(#         FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER,
postgres(#         FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER
postgres(# );
CREATE TABLE
postgres=# ALTER TABLE employees
postgres-# ADD CONSTRAINT fk_employee_department
postgres-# FOREIGN KEY (dept_id) REFERENCES departments(dept_id);
ALTER TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER,
postgres(#         CONSTRAINT fk_employee_department
postgres(#                 FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO departments (dept_name, location) VALUES
postgres-#         ('Engineering', 'Building A'),
postgres-#         ('Marketing', 'Building B'),
postgres-#         ('HR', 'Building C');
INSERT 0 3
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
postgres-#         ('John', 'Smith', '1');
INSERT 0 1
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
postgres-#         ('Jane', 'Doe', '99');
ОШИБКА:  INSERT или UPDATE в таблице "employees" нарушает ограничение внешнего ключа "fk_employee_department"
ПОДРОБНОСТИ:  Ключ (dept_id)=(99) отсутствует в таблице "departments".
postgres=# DELETE FROM departments WHERE dept_id = 1;
ОШИБКА:  UPDATE или DELETE в таблице "departments" нарушает ограничение внешнего ключа "fk_employee_department" таблицы "employees"
ПОДРОБНОСТИ:  На ключ (dept_id)=(1) всё ещё есть ссылки в таблице "employees".
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=# DELETE FROM DEPARTMENTS WHERE dept_id = 1;
DELETE 1
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET NULL
postgres(# );
CREATE TABLE
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
postgres=# INSERT INTO departments (dept_name, location) VALUES
postgres-#         ('Engineering', 'Building A'),
postgres-#         ('Marketing', 'Building B'),
postgres-#         ('HR', 'Building C');
INSERT 0 3
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#     emp_id SERIAL PRIMARY KEY,
postgres(#     first_name VARCHAR(50) NOT NULL,
postgres(#     last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET DEFAULT
postgres(# );
CREATE TABLE
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location
---------+-------------+------------
       2 | Marketing   | Building B
       3 | HR          | Building C
       4 | Engineering | Building A
       5 | Marketing   | Building B
       6 | HR          | Building C
(5 строк)


postgres=# DELETE FROM departments WHERE dept_id = 2;
DELETE 1
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location
---------+-------------+------------
       3 | HR          | Building C
       4 | Engineering | Building A
       5 | Marketing   | Building B
       6 | HR          | Building C
(4 строки)


postgres=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id
--------+------------+-----------+---------
(0 строк)


postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
postgres-#         ('John', 'Smith', '3');
INSERT 0 1
postgres=# DELETE FROM departments WHERE dept_id = 3;
DELETE 1
postgres=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id
--------+------------+-----------+---------
      1 | John       | Smith     |
(1 строка)


postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location
---------+-------------+------------
       4 | Engineering | Building A
       5 | Marketing   | Building B
       6 | HR          | Building C
(3 строки)


postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#     emp_id SERIAL PRIMARY KEY,
postgres(#     first_name VARCHAR(50) NOT NULL,
postgres(#     last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER REFERENCES departments(dept_id) ON DELETE RESTRICT
postgres(# );
CREATE TABLE
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
postgres-#         ('John', 'Smith', '4');
INSERT 0 1
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#     emp_id SERIAL PRIMARY KEY,
postgres(#     first_name VARCHAR(50) NOT NULL,
postgres(#     last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER REFERENCES departments(dept_id) ON UPDATE CASCADE
postgres(# );
CREATE TABLE
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location
---------+-------------+------------
       4 | Engineering | Building A
       5 | Marketing   | Building B
       6 | HR          | Building C
(3 строки)


postgres=# UPDATE departments SET dept_id = 100 WHERE dept_id = 4;
UPDATE 1
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location
---------+-------------+------------
       5 | Marketing   | Building B
       6 | HR          | Building C
     100 | Engineering | Building A
(3 строки)


postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#     emp_id SERIAL PRIMARY KEY,
postgres(#     first_name VARCHAR(50) NOT NULL,
postgres(#     last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER REFERENCES departments(dept_id)
postgres(#                 ON DELETE CASCADE
postgres(#                 ON UPDATE CASCADE
postgres(# );
CREATE TABLE
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location
---------+-------------+------------
       5 | Marketing   | Building B
       6 | HR          | Building C
     100 | Engineering | Building A
(3 строки)


postgres=# UPDATE departments SET dept_id = 30 WHERE dept_id = 5;
UPDATE 1
postgres=# DELETE FROM departments WHERE dept_id = 30;
DELETE 1
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location
---------+-------------+------------
       6 | HR          | Building C
     100 | Engineering | Building A
(2 строки)


postgres=# \dt
             Список отношений
 Схема  |     Имя     |   Тип   | Владелец
--------+-------------+---------+----------
 public | departments | таблица | postgres
 public | employees   | таблица | postgres
(2 строки)


postgres=# DROP TABLE employees;
DROP TABLE
postgres=# DROP TABLE departments;
DROP TABLE
postgres=# CREATE TABLE users(
postgres(#         user_id SERIAL PRIMARY KEY,
postgres(#         username VARCHAR(50) UNIQUE NOT NULL,
postgres(#         email VARCHAR(100) UNIQUE NOT NULL,
postgres(#         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE user_profiles(
postgres(#         profile_id SERIAL PRIMARY KEY,
postgres(#         user_id INTEGER UNIQUE NOT NULL,
postgres(#         first_name VARCHAR(50),
postgres(#         last_name VARCHAR(50),
postgres(#         bio TEXT,
postgres(#         profile_picture_url VARCHAR(255),
postgres(#         FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=# INSERT INTO users (username, email) VALUES
postgres-#         ('kkp', 'example@gmail.com');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
postgres-#         ('1', 'Emil', 'Sagidullin', 'example');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
postgres-#         ('1', 'Not Emil', 'Sagidullin', 'example');
ОШИБКА:  повторяющееся значение ключа нарушает ограничение уникальности "user_profiles_user_id_key"
ПОДРОБНОСТИ:  Ключ "(user_id)=(1)" уже существует.
postgres=# DROP TABLE user_profiles;
DROP TABLE
postgres=# CREATE TABLE user_profiles(
postgres(#         user_id INTEGER PRIMARY KEY,
postgres(#         first_name VARCHAR(50),
postgres(#         last_name VARCHAR(50),
postgres(#         bio TEXT,
postgres(#         profile_picture_url VARCHAR(255),
postgres(#         FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=# SELECT * FROM users;
 user_id | username |       email       |         created_at
---------+----------+-------------------+----------------------------
       1 | kkp      | example@gmail.com | 2025-09-18 10:26:18.338759
(1 строка)


postgres=# NSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
postgres-#         ('1', 'Emil', 'Sagidullin', 'example');
ОШИБКА:  ошибка синтаксиса (примерное положение: "NSERT")
СТРОКА 1: NSERT INTO user_profiles (user_id, first_name, last_name, bi...
          ^
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
postgres-#         ('1', 'Emil', 'Sagidullin', 'example');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
postgres-#         ('1', 'Not Emil', 'Sagidullin', 'example');
ОШИБКА:  повторяющееся значение ключа нарушает ограничение уникальности "user_profiles_pkey"
ПОДРОБНОСТИ:  Ключ "(user_id)=(1)" уже существует.
postgres=# \dt
              Список отношений
 Схема  |      Имя      |   Тип   | Владелец
--------+---------------+---------+----------
 public | user_profiles | таблица | postgres
 public | users         | таблица | postgres
(2 строки)


postgres=# DROP TABLE user_profiles;
DROP TABLE
postgres=# DROP TABLE users;
DROP TABLE
postgres=# CREATE TABLE departments (
postgres(#         dept_id SERIAL PRIMARY KEY,
postgres(#         dept_name VARCHAR(100) NOT NULL,
postgres(#         manager_name VARCHAR(100),
postgres(#         budget DECIMAL(10, 2)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         position VARCHAR(100),
postgres(#         salary DECIMAL(10,2),
postgres(#         hire_date DATE DEFAULT CURRENT_DATE,
postgres(#         dept_id INTEGER NOT NULL,
postgres(#         FOREIGN KEY (dept_id) REFERENCES departments (dept_id) ON DELETE RESTRICT
postgres(# );
CREATE TABLE
postgres=# INSERT INTO departments (dept_name, manager_name, budget) VALUES
postgres-#         ('Engineering', 'Alice Johnson', 50000.00),
postgres-#         ('Marketing', 'Bob Wilson', 20000.00);
INSERT 0 2
postgres=# INSERT INTO  employees (first_name, last_name, position, salary, dept_id) VALUES
postgres-#         ('John', 'Smith', 'Software Engineer', 7500.00, 1),
postgres-#         ('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
postgres-#         ('Mike', 'Brown', 'DevOps Engineer', 80000.00, 1),
postgres-#         ('Sarah', 'Davis', 'Marketing Specialist', 55000.00, 2);
INSERT 0 4
postgres=# SELECT d.dept_name, e.first_name, e.last_name, e.position
postgres-# FROM departments d
postgres-# JOIN employees e ON d.dept_id = e.dept_id
postgres-# ORDER BY d.dept_name, e.last_name;
  dept_name  | first_name | last_name |       position
-------------+------------+-----------+----------------------
 Engineering | Mike       | Brown     | DevOps Engineer
 Engineering | Jane       | Doe       | Senior Developer
 Engineering | John       | Smith     | Software Engineer
 Marketing   | Sarah      | Davis     | Marketing Specialist
(4 строки)


postgres=# \dt
             Список отношений
 Схема  |     Имя     |   Тип   | Владелец
--------+-------------+---------+----------
 public | departments | таблица | postgres
 public | employees   | таблица | postgres
(2 строки)


postgres=# DROP TABLE employees;
DROP TABLE
postgres=# DROP TABLE departments;
DROP TABLE
postgres=# CREATE TABLE students(
postgres(#         student_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         email VARCHAR(100) UNIQUE,
postgres(#         enrollment_date DATE DEFAULT CURRENT_DATE
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE courses (
postgres(#         course_id SERIAL PRIMARY KEY,
postgres(#         course_code VARCHAR(10) UNIQUE NOT NULL,
postgres(#         course_name VARCHAR(100) NOT NULL,
postgres(#         credits INTEGER NOT NULL,
postgres(#         instructor VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE student_enrollments (
postgres(#         enrollment_id SERIAL PRIMARY KEY,
postgres(#         student_id INTEGER NOT NULL,
postgres(#         course_id INTEGER NOT NULL,
postgres(#         enrollment_date DATE DEFAULT CURRENT_DATE,
postgres(#         grade CHAR(2),
postgres(#
postgres(#         FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
postgres(#         FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
postgres(#
postgres(#         UNIQUE(student_id, course_id)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO students (first_name, last_name, email) VALUES
postgres-#         ('Alice', 'Johnson', 'alice@university.edu'),
postgres-#         ('Bob', 'Smith', 'bob@university.edu'),
postgres-#         ('Carol', 'Wilson', 'carol@university.edu');
INSERT 0 3
postgres=#
postgres=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
postgres-#         ('CS101', 'Introduction to Programming', '3', 'Dr. Brown'),
postgres-#         ('CS201', 'Data Structures', 4, 'Dr. Davis'),
postgres-#         ('MATH101', 'Calculus I', 4, 'Dr. Wilson');
INSERT 0 3
postgres=#
postgres=# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
postgres-#         (1, 1, 'A'),
postgres-#         (1, 2, 'B+'),
postgres-#         (2, 1, 'A-'),
postgres-#         (2, 3, 'B'),
postgres-#         (3, 2, 'A'),
postgres-#         (3, 3, 'A-');
INSERT 0 6
postgres=#
postgres=# SELECT
postgres-#         s.first_name || '' || s.last_name AS student_name,
postgres-#         c.course_code,
postgres-#         c.course_name,
postgres-#         se.grade,
postgres-#         se.enrollment_date
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.course_id = c.course_id
postgres-# ORDER BY s.last_name, c.course_code;
 student_name | course_code |         course_name         | grade | enrollment_date
--------------+-------------+-----------------------------+-------+-----------------
 AliceJohnson | CS101       | Introduction to Programming | A     | 2025-09-18
 AliceJohnson | CS201       | Data Structures             | B+    | 2025-09-18
 BobSmith     | CS101       | Introduction to Programming | A-    | 2025-09-18
 BobSmith     | MATH101     | Calculus I                  | B     | 2025-09-18
 CarolWilson  | CS201       | Data Structures             | A     | 2025-09-18
 CarolWilson  | MATH101     | Calculus I                  | A-    | 2025-09-18
(6 строк)


postgres=# SELECT s.first_name, s.last_name, se.grade
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.course_id = c.course_id
postgres-# WHERE c.course_code = 'CS101';
 first_name | last_name | grade
------------+-----------+-------
 Alice      | Johnson   | A
 Bob        | Smith     | A-
(2 строки)


postgres=# SELECT c.course_code, c.course_name, c.credits, se.grade
postgres-# FROM courses c
postgres-# JOIN student_enrollments se ON c.course_id = se.course_id
postgres-# JOIN students s ON se.student_id = s.student_id
postgres-# WHERE s.email = 'alice@university.edu';
 course_code |         course_name         | credits | grade
-------------+-----------------------------+---------+-------
 CS101       | Introduction to Programming |       3 | A
 CS201       | Data Structures             |       4 | B+
(2 строки)


postgres=# DROP TABLE student_enrollments;
DROP TABLE
postgres=# DROP TABLE courses;
DROP TABLE
postgres=# DROP TABLE students;
DROP TABLE
postgres=# \q
PS C:\Users\Emil>